#!/usr/bin/env node

const os = require('os');
const path = require('path');
const https = require('https');
const crypto = require('crypto');
const fs = require('fs').promises;
const { spawn } = require('child_process');

const settings = {
    secret: param('--key'),
    port: Number(param('--port', '44300')),
    ip_address: undefined,
    disk_space: Number(param('--size', '64')) * 1073741824,
    network_speed: 0,
    build_version: 31,
    tls_created_at: undefined
}

function param(option, fallback) {
    return (process.argv.find(arg => arg.startsWith(option + '=')) || fallback || '').split('=').pop();
}

function metrics(origin) {
    return origin + '/' + crypto.createHash('md5').update(settings.secret).digest("hex").slice(-8);
}

function post(path, payload) {
    return new Promise((resolve, reject) => {
        const body = JSON.stringify(payload || {});
        const request = {
            method: 'POST', hostname: 'api.mangadex.network', port: 443, path: path,
            headers: {
              'Content-Type': 'application/json',
              'Content-Length': body.length
            }
        };
        const connection = https.request(request, response => {
            const chunks = [];
            response.on('data', chunk => chunks.push(chunk))
            response.on('end', () => {
                response.json = JSON.parse(Buffer.concat(chunks).toString('utf8'));
                resolve(response);
            });
        });
        connection.on('error', error => {
            //connection.destroy();
            //connection.abort();
            reject(error);
        });
        connection.write(body);
        connection.end();
    });
}

async function nginx(args) {
    return new Promise((resolve, reject) => {
        let stderr = '';
        const process = spawn('nginx', args);
        process.stderr.on('data', chunk => {
            stderr += chunk;
        });
        process.once('exit', code => {
            process.removeAllListeners('data');
            if(code !== 0) {
                console.error(new Date().toISOString(), '[ERROR] => nginx', args.join(' '), ` > exit=${code}`);
                console.error('  > STDERR', stderr);
                reject();
            } else {
                console.info(new Date().toISOString(), '[INFO] => nginx', args.join(' '));
                resolve();
            }
        });
    });
}

async function ping() {
    const response = await post('/ping', settings);
    const data = await response.json;
    console.info(new Date().toISOString(), '[INFO] =>', 'PING MangaDex@Home Remote API Server:', response.statusCode, response.statusMessage, [ '',
        `  > Client:  id=${data.client_id}, build=${settings.build_version}/${data.latest_build}, paused=${data.paused}, compromised=${data.compromised}`,
        `  > Status:  ${metrics(data.url)}`,
        `  > Address: ${data.url}`,
        `  > Origin:  ${data.image_server}`,
        `  > TLS:     ${data.tls ? data.tls.created_at : settings.tls_created_at}`
    ].join(os.EOL));
    if(data.tls && data.tls.created_at !== settings.tls_created_at) {
        await fs.writeFile(path.join(__dirname, 'mdathx.crt'), data.tls.certificate);
        await fs.writeFile(path.join(__dirname, 'mdathx.key'), data.tls.private_key);
        settings.tls_created_at = data.tls.created_at;
        console.info(new Date().toISOString(), '[NOTICE] =>', `Received certificate (created ${settings.tls_created_at})`);
    }
    return data;
}

async function stop() {
    process.once('SIGINT', async () => {
        console.info();
        await shutdown();
    });
    const response = await post('/stop', { secret: settings.secret });
    console.info(new Date().toISOString(), '[INFO] =>', 'STOP MangaDex@Home Remote API Server:', response.statusCode, response.statusMessage);
    for(let remaining = 30; remaining > 0; remaining -= 5) {
        console.info(new Date().toISOString(), '[NOTICE] =>', `Shutdown in ${remaining} seconds ...`);
        await new Promise(resolve => setTimeout(resolve, 5000));
    }
    await shutdown();
}

async function shutdown() {
    await nginx([ '-s', 'stop' ]);
    process.exit();
}

async function start() {
    const data = await ping(); // ping to ensure certificates are correctly created ...
    const template = await fs.readFile(path.join(__dirname, 'mdathx.conf'), 'utf8');
    const configuration = template
        .replace(/%PORT%/g, settings.port)
        .replace(/%WORKERS%/g, os.cpus().length)
        .replace(/%UPSTREAM%/g, data.image_server)
        .replace(/%CACHE_SIZE%/g, settings.disk_space)
        .replace(/%CACHE_DIRECTORY%/g, param('--cache', './cache'))
        .replace(/%TLS%/, process.argv.includes('--no-ssl') ? '' : 'ssl  http2')
        .replace(/%STATUS_ENDPOINT%/, metrics(''));
    await fs.writeFile(path.join(__dirname, 'mdathx.run.conf'), configuration);
    await nginx([ '-p', __dirname, '-c', 'mdathx.run.conf' ]);
    const keepalive = setInterval(async () => {
        const data = await ping();
        if(data.tls) {
            await nginx([ '-s', 'reload' ]);
        }
    }, 60_000);
    process.once('SIGINT', async () => {
        clearInterval(keepalive);
        console.info();
        await stop();
    });
}

start();